const app = require("./app");
const mongoose = require("mongoose");
const nodemailer = require("nodemailer");
require("dotenv").config(); // Load environment variables from .env
const User = require("./models/User"); // Import User model

const PORT = process.env.PORT || 5000;
const MONGO_URI = process.env.MONGO_URI;

// Configure Nodemailer transporter
const transporter = nodemailer.createTransport({
  service: "Gmail", // Use Gmail or another email service
  auth: {
    user: process.env.EMAIL, // Admin email address
    pass: process.env.EMAIL_PASSWORD, // Admin email password
  },
});

// Function to send notification email
function sendNotificationEmail(newUserEmail) {
  const mailOptions = {
    from: process.env.EMAIL,
    to: process.env.ADMIN_EMAIL, // Admin email address to receive notifications
    subject: "New User Registration",
    text: `A new user has joined the platform: ${newUserEmail}`,
  };

  transporter.sendMail(mailOptions, (error, info) => {
    if (error) {
      console.error("Error sending email:", error);
    } else {
      console.log("Email sent:", info.response);
    }
  });
}

// MongoDB connection
mongoose
  .connect(MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log("Connected to MongoDB"))
  .catch((err) => console.error("Error connecting to MongoDB:", err));

// User registration route
app.post("/register", async (req, res) => {
  const { email, password } = req.body;

  try {
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).send("User already exists.");
    }

    // Save the user to the database with 'approved' as false
    const newUser = await User.create({ email, password, approved: false });

    // Trigger email notification to the admin
    sendNotificationEmail(newUser.email);

    res.status(201).send("User registered successfully. Awaiting admin approval.");
  } catch (error) {
    console.error("Error registering user:", error);
    res.status(400).send("Error registering user.");
  }
});

// User login route
app.post("/login", async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(404).send("User not found.");
    }

    if (!user.approved) {
      return res.status(403).send("User not approved by admin.");
    }

    if (user.password !== password) {
      return res.status(400).send("Invalid credentials.");
    }

    res.status(200).send("Login successful.");
  } catch (error) {
    console.error("Error logging in:", error);
    res.status(500).send("Error logging in.");
  }
});

// Admin approval route
app.post("/approve-user", async (req, res) => {
  const { email } = req.body;

  try {
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(404).send("User not found.");
    }

    user.approved = true;
    await user.save();

    res.status(200).send("User approved successfully.");
  } catch (error) {
    console.error("Error approving user:", error);
    res.status(500).send("Error approving user.");
  }
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
